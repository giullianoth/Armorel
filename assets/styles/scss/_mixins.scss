// THEME
@mixin theme() {
    .arm {
        @content;
    }
}

// OFFLINE FONTS
@mixin setFonts($presets) {

    $weight: ();
    $family: ();
    $files: ();
    $path: ();
    $format: ();

    @each $attr, $values in $presets {

        @if $attr == "weights" {
            @for $w from 1 through length($list: $values) {
                $weight: append($list: $weight, $val: nth($list: $values, $n: $w), $separator: comma);
            }
        }

        @if $attr == "family" {
            @for $f from 1 through length($list: $weight) {
                $family: append($list: $family, $val: $values, $separator: comma);
            }
        }

        @if $attr == "files" {
            @for $fl from 1 through length($list: $weight) {
                $files: append($list: $files, $val: nth($list: $values, $n: $fl), $separator: comma);
            }
        }

        @if $attr == "path" {
            @for $p from 1 through length($list: $weight) {
                $path: append($list: $path, $val: "#{$font-path}/#{$values}/#{nth($list: $files, $n: $p)}", $separator: comma);
            }
        }

        @if $attr == "format" {
            @for $fm from 1 through length($list: $weight) {
                $format: append($list: $format, $val: $values, $separator: comma);
            }
        }
    }

    @for $font from 1 through length($list: $weight) {
        @font-face {
            font-family: nth($list: $family, $n: $font);
            src: url(nth($list: $path, $n: $font)) format(nth($list: $format, $n: $font));
            font-weight: nth($list: $weight, $n: $font);
        }
    }
}

// CONTAINER
@mixin containerFluid($fillScreen: false) {
    width: 100%;

    @if $fillScreen == true {
        height: 100%;
    }
}

@mixin container($maxWidth: $container-max-width-default, $clearance: $container-clearance) {
    max-width: $maxWidth;
    padding-inline: $clearance;
    margin: 0 auto;
}

// BROWSER PREFIXES ATTRIBUTES
@mixin setBrowserPrefixes($attr, $value, $prefixes: $browser-prefixes-default) {
    #{$attr}: #{$value};

    @each $prefix in $prefixes {
        -#{$prefix}-#{$attr}: #{$value};
    }
}

// BORDER RADIUS
@mixin borderRadius($radius: $radius-default) {
    @include setBrowserPrefixes(border-radius, $radius);
}

@mixin rounded() {
    @include borderRadius(50%);
}

// FLEXBOX
@mixin flex($justifyContent: center, $alignItems: center, $flexWrap: wrap) {
    display: flex;
    justify-content: $justifyContent;
    align-items: $alignItems;
    flex-wrap: $flexWrap;
}

@mixin flexBasis($basis, $gap: 0) {
    @if $gap !=0 {
        flex-basis: calc($basis - $gap);
    }

    @else {
        flex-basis: $basis;
    }
}

@mixin flex1($gap: 0) {
    @include flexBasis(100%, $gap);
}

@mixin flex2($gap: 0) {
    @include flexBasis(calc(100% / 2), calc($gap - ($gap / 2)));
}

@mixin flex3($gap: 0) {
    @include flexBasis(calc(100% / 3), calc($gap - ($gap / 3)));
}

@mixin flex4($gap: 0) {
    @include flexBasis(calc(100% / 4), calc($gap - ($gap / 4)));
}

// POSITION
// Relative
@mixin relative() {
    position: relative;
}

// Absolute
@mixin absolute($top: 0, $left: 0) {
    position: absolute;
    top: $top;
    left: $left;
}

@mixin absoluteFull($top: 0, $left: 0, $fillScreen: false) {
    @include absolute($top, $left);
    @include containerFluid($fillScreen);
}

// Fixed
@mixin fixed($top: 0, $left: 0) {
    position: fixed;
    top: $top;
    left: $left;
}

@mixin fixedFull($top: 0, $left: 0, $fillScreen: false) {
    @include fixed($top, $left);
    @include containerFluid($fillScreen);
}

// BACKGROUND IMAGE
@mixin backgroundImage($image: "", $repeat: no-repeat, $size: cover, $position: center center) {
    @if $image != "" {
        background-image: url("#{$image-path}/#{$image}");
    }

    background-repeat: $repeat;
    background-size: $size;
    background-position: $position;
}

// TRANSITIONS AND ANIMATIONS
@mixin transition($property: all, $duration: $transition-duration-default, $timingFunction: ease, $delay: 0s) {
    transition: $property $duration $timingFunction $delay;
}

// RESPONSIVE DESIGN
@mixin setResponsiveDesign($screenWidth, $isMaxWidth: false) {

    @if $isMaxWidth == true {
        @media screen and (max-width: $screenWidth) {
            @content;
        }
    }

    @else {
        @media screen and (min-width: $screenWidth) {
            @content;
        }
    }
}